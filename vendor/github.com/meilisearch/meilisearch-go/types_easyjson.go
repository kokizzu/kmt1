// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package meilisearch

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo(in *jlexer.Lexer, out *Version) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "commitSha":
			out.CommitSha = string(in.String())
		case "buildDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BuildDate).UnmarshalJSON(data))
			}
		case "pkgVersion":
			out.PkgVersion = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo(out *jwriter.Writer, in Version) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"commitSha\":"
		out.RawString(prefix[1:])
		out.String(string(in.CommitSha))
	}
	{
		const prefix string = ",\"buildDate\":"
		out.RawString(prefix)
		out.Raw((in.BuildDate).MarshalJSON())
	}
	{
		const prefix string = ",\"pkgVersion\":"
		out.RawString(prefix)
		out.String(string(in.PkgVersion))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Version) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Version) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Version) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Version) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo(l, v)
}
func easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo1(in *jlexer.Lexer, out *Update) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = UpdateStatus(in.String())
		case "updateId":
			out.UpdateID = int64(in.Int64())
		case "type":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Type = make(Unknown)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					(out.Type)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "error":
			out.Error = string(in.String())
		case "enqueuedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EnqueuedAt).UnmarshalJSON(data))
			}
		case "processedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ProcessedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo1(out *jwriter.Writer, in Update) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"updateId\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdateID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		if in.Type == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Type {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if m, ok := v2Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v2Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v2Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	{
		const prefix string = ",\"enqueuedAt\":"
		out.RawString(prefix)
		out.Raw((in.EnqueuedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"processedAt\":"
		out.RawString(prefix)
		out.Raw((in.ProcessedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Update) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Update) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Update) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Update) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo1(l, v)
}
func easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo2(in *jlexer.Lexer, out *StatsIndex) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "numberOfDocuments":
			out.NumberOfDocuments = int64(in.Int64())
		case "isIndexing":
			out.IsIndexing = bool(in.Bool())
		case "fieldsFrequency":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.FieldsFrequency = make(map[string]int64)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 int64
					v3 = int64(in.Int64())
					(out.FieldsFrequency)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo2(out *jwriter.Writer, in StatsIndex) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"numberOfDocuments\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.NumberOfDocuments))
	}
	{
		const prefix string = ",\"isIndexing\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsIndexing))
	}
	{
		const prefix string = ",\"fieldsFrequency\":"
		out.RawString(prefix)
		if in.FieldsFrequency == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.FieldsFrequency {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				out.Int64(int64(v4Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StatsIndex) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StatsIndex) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StatsIndex) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StatsIndex) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo2(l, v)
}
func easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo3(in *jlexer.Lexer, out *Stats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "database_size":
			out.DatabaseSize = int64(in.Int64())
		case "last_update":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastUpdate).UnmarshalJSON(data))
			}
		case "indexes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Indexes = make(map[string]StatsIndex)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 StatsIndex
					(v5).UnmarshalEasyJSON(in)
					(out.Indexes)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo3(out *jwriter.Writer, in Stats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"database_size\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.DatabaseSize))
	}
	{
		const prefix string = ",\"last_update\":"
		out.RawString(prefix)
		out.Raw((in.LastUpdate).MarshalJSON())
	}
	{
		const prefix string = ",\"indexes\":"
		out.RawString(prefix)
		if in.Indexes == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Indexes {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				(v6Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Stats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Stats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Stats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Stats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo3(l, v)
}
func easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo4(in *jlexer.Lexer, out *Settings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rankingRules":
			if in.IsNull() {
				in.Skip()
				out.RankingRules = nil
			} else {
				in.Delim('[')
				if out.RankingRules == nil {
					if !in.IsDelim(']') {
						out.RankingRules = make([]string, 0, 4)
					} else {
						out.RankingRules = []string{}
					}
				} else {
					out.RankingRules = (out.RankingRules)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.RankingRules = append(out.RankingRules, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "distinctAttribute":
			if in.IsNull() {
				in.Skip()
				out.DistinctAttribute = nil
			} else {
				if out.DistinctAttribute == nil {
					out.DistinctAttribute = new(string)
				}
				*out.DistinctAttribute = string(in.String())
			}
		case "searchableAttributes":
			if in.IsNull() {
				in.Skip()
				out.SearchableAttributes = nil
			} else {
				in.Delim('[')
				if out.SearchableAttributes == nil {
					if !in.IsDelim(']') {
						out.SearchableAttributes = make([]string, 0, 4)
					} else {
						out.SearchableAttributes = []string{}
					}
				} else {
					out.SearchableAttributes = (out.SearchableAttributes)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.SearchableAttributes = append(out.SearchableAttributes, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "displayedAttributes":
			if in.IsNull() {
				in.Skip()
				out.DisplayedAttributes = nil
			} else {
				in.Delim('[')
				if out.DisplayedAttributes == nil {
					if !in.IsDelim(']') {
						out.DisplayedAttributes = make([]string, 0, 4)
					} else {
						out.DisplayedAttributes = []string{}
					}
				} else {
					out.DisplayedAttributes = (out.DisplayedAttributes)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.DisplayedAttributes = append(out.DisplayedAttributes, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "stopWords":
			if in.IsNull() {
				in.Skip()
				out.StopWords = nil
			} else {
				in.Delim('[')
				if out.StopWords == nil {
					if !in.IsDelim(']') {
						out.StopWords = make([]string, 0, 4)
					} else {
						out.StopWords = []string{}
					}
				} else {
					out.StopWords = (out.StopWords)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.StopWords = append(out.StopWords, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "synonyms":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Synonyms = make(map[string][]string)
				} else {
					out.Synonyms = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v11 []string
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						in.Delim('[')
						if v11 == nil {
							if !in.IsDelim(']') {
								v11 = make([]string, 0, 4)
							} else {
								v11 = []string{}
							}
						} else {
							v11 = (v11)[:0]
						}
						for !in.IsDelim(']') {
							var v12 string
							v12 = string(in.String())
							v11 = append(v11, v12)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Synonyms)[key] = v11
					in.WantComma()
				}
				in.Delim('}')
			}
		case "attributesForFaceting":
			if in.IsNull() {
				in.Skip()
				out.AttributesForFaceting = nil
			} else {
				in.Delim('[')
				if out.AttributesForFaceting == nil {
					if !in.IsDelim(']') {
						out.AttributesForFaceting = make([]string, 0, 4)
					} else {
						out.AttributesForFaceting = []string{}
					}
				} else {
					out.AttributesForFaceting = (out.AttributesForFaceting)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.AttributesForFaceting = append(out.AttributesForFaceting, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo4(out *jwriter.Writer, in Settings) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.RankingRules) != 0 {
		const prefix string = ",\"rankingRules\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v14, v15 := range in.RankingRules {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	if in.DistinctAttribute != nil {
		const prefix string = ",\"distinctAttribute\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.DistinctAttribute))
	}
	if len(in.SearchableAttributes) != 0 {
		const prefix string = ",\"searchableAttributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v16, v17 := range in.SearchableAttributes {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.String(string(v17))
			}
			out.RawByte(']')
		}
	}
	if len(in.DisplayedAttributes) != 0 {
		const prefix string = ",\"displayedAttributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.DisplayedAttributes {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.String(string(v19))
			}
			out.RawByte(']')
		}
	}
	if len(in.StopWords) != 0 {
		const prefix string = ",\"stopWords\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.StopWords {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	if len(in.Synonyms) != 0 {
		const prefix string = ",\"synonyms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v22First := true
			for v22Name, v22Value := range in.Synonyms {
				if v22First {
					v22First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v22Name))
				out.RawByte(':')
				if v22Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v23, v24 := range v22Value {
						if v23 > 0 {
							out.RawByte(',')
						}
						out.String(string(v24))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.AttributesForFaceting) != 0 {
		const prefix string = ",\"attributesForFaceting\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v25, v26 := range in.AttributesForFaceting {
				if v25 > 0 {
					out.RawByte(',')
				}
				out.String(string(v26))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Settings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Settings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Settings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Settings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo4(l, v)
}
func easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo5(in *jlexer.Lexer, out *SearchResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hits":
			if in.IsNull() {
				in.Skip()
				out.Hits = nil
			} else {
				in.Delim('[')
				if out.Hits == nil {
					if !in.IsDelim(']') {
						out.Hits = make([]interface{}, 0, 4)
					} else {
						out.Hits = []interface{}{}
					}
				} else {
					out.Hits = (out.Hits)[:0]
				}
				for !in.IsDelim(']') {
					var v27 interface{}
					if m, ok := v27.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v27.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v27 = in.Interface()
					}
					out.Hits = append(out.Hits, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "nbHits":
			out.NbHits = int64(in.Int64())
		case "offset":
			out.Offset = int64(in.Int64())
		case "limit":
			out.Limit = int64(in.Int64())
		case "processingTimeMs":
			out.ProcessingTimeMs = int64(in.Int64())
		case "query":
			out.Query = string(in.String())
		case "facetsDistribution":
			if m, ok := out.FacetsDistribution.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.FacetsDistribution.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.FacetsDistribution = in.Interface()
			}
		case "exhaustiveFacetsCount":
			if m, ok := out.ExhaustiveFacetsCount.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ExhaustiveFacetsCount.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ExhaustiveFacetsCount = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo5(out *jwriter.Writer, in SearchResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hits\":"
		out.RawString(prefix[1:])
		if in.Hits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v28, v29 := range in.Hits {
				if v28 > 0 {
					out.RawByte(',')
				}
				if m, ok := v29.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v29.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v29))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"nbHits\":"
		out.RawString(prefix)
		out.Int64(int64(in.NbHits))
	}
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Int64(int64(in.Offset))
	}
	{
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		out.Int64(int64(in.Limit))
	}
	{
		const prefix string = ",\"processingTimeMs\":"
		out.RawString(prefix)
		out.Int64(int64(in.ProcessingTimeMs))
	}
	{
		const prefix string = ",\"query\":"
		out.RawString(prefix)
		out.String(string(in.Query))
	}
	if in.FacetsDistribution != nil {
		const prefix string = ",\"facetsDistribution\":"
		out.RawString(prefix)
		if m, ok := in.FacetsDistribution.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.FacetsDistribution.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.FacetsDistribution))
		}
	}
	if in.ExhaustiveFacetsCount != nil {
		const prefix string = ",\"exhaustiveFacetsCount\":"
		out.RawString(prefix)
		if m, ok := in.ExhaustiveFacetsCount.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ExhaustiveFacetsCount.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ExhaustiveFacetsCount))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo5(l, v)
}
func easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo6(in *jlexer.Lexer, out *SearchRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Query":
			out.Query = string(in.String())
		case "Offset":
			out.Offset = int64(in.Int64())
		case "Limit":
			out.Limit = int64(in.Int64())
		case "AttributesToRetrieve":
			if in.IsNull() {
				in.Skip()
				out.AttributesToRetrieve = nil
			} else {
				in.Delim('[')
				if out.AttributesToRetrieve == nil {
					if !in.IsDelim(']') {
						out.AttributesToRetrieve = make([]string, 0, 4)
					} else {
						out.AttributesToRetrieve = []string{}
					}
				} else {
					out.AttributesToRetrieve = (out.AttributesToRetrieve)[:0]
				}
				for !in.IsDelim(']') {
					var v30 string
					v30 = string(in.String())
					out.AttributesToRetrieve = append(out.AttributesToRetrieve, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "AttributesToCrop":
			if in.IsNull() {
				in.Skip()
				out.AttributesToCrop = nil
			} else {
				in.Delim('[')
				if out.AttributesToCrop == nil {
					if !in.IsDelim(']') {
						out.AttributesToCrop = make([]string, 0, 4)
					} else {
						out.AttributesToCrop = []string{}
					}
				} else {
					out.AttributesToCrop = (out.AttributesToCrop)[:0]
				}
				for !in.IsDelim(']') {
					var v31 string
					v31 = string(in.String())
					out.AttributesToCrop = append(out.AttributesToCrop, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CropLength":
			out.CropLength = int64(in.Int64())
		case "AttributesToHighlight":
			if in.IsNull() {
				in.Skip()
				out.AttributesToHighlight = nil
			} else {
				in.Delim('[')
				if out.AttributesToHighlight == nil {
					if !in.IsDelim(']') {
						out.AttributesToHighlight = make([]string, 0, 4)
					} else {
						out.AttributesToHighlight = []string{}
					}
				} else {
					out.AttributesToHighlight = (out.AttributesToHighlight)[:0]
				}
				for !in.IsDelim(']') {
					var v32 string
					v32 = string(in.String())
					out.AttributesToHighlight = append(out.AttributesToHighlight, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Filters":
			out.Filters = string(in.String())
		case "Matches":
			out.Matches = bool(in.Bool())
		case "FacetsDistribution":
			if in.IsNull() {
				in.Skip()
				out.FacetsDistribution = nil
			} else {
				in.Delim('[')
				if out.FacetsDistribution == nil {
					if !in.IsDelim(']') {
						out.FacetsDistribution = make([]string, 0, 4)
					} else {
						out.FacetsDistribution = []string{}
					}
				} else {
					out.FacetsDistribution = (out.FacetsDistribution)[:0]
				}
				for !in.IsDelim(']') {
					var v33 string
					v33 = string(in.String())
					out.FacetsDistribution = append(out.FacetsDistribution, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "FacetFilters":
			if m, ok := out.FacetFilters.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.FacetFilters.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.FacetFilters = in.Interface()
			}
		case "PlaceholderSearch":
			out.PlaceholderSearch = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo6(out *jwriter.Writer, in SearchRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Query\":"
		out.RawString(prefix[1:])
		out.String(string(in.Query))
	}
	{
		const prefix string = ",\"Offset\":"
		out.RawString(prefix)
		out.Int64(int64(in.Offset))
	}
	{
		const prefix string = ",\"Limit\":"
		out.RawString(prefix)
		out.Int64(int64(in.Limit))
	}
	{
		const prefix string = ",\"AttributesToRetrieve\":"
		out.RawString(prefix)
		if in.AttributesToRetrieve == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.AttributesToRetrieve {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.String(string(v35))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"AttributesToCrop\":"
		out.RawString(prefix)
		if in.AttributesToCrop == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.AttributesToCrop {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.String(string(v37))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"CropLength\":"
		out.RawString(prefix)
		out.Int64(int64(in.CropLength))
	}
	{
		const prefix string = ",\"AttributesToHighlight\":"
		out.RawString(prefix)
		if in.AttributesToHighlight == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.AttributesToHighlight {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.String(string(v39))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Filters\":"
		out.RawString(prefix)
		out.String(string(in.Filters))
	}
	{
		const prefix string = ",\"Matches\":"
		out.RawString(prefix)
		out.Bool(bool(in.Matches))
	}
	{
		const prefix string = ",\"FacetsDistribution\":"
		out.RawString(prefix)
		if in.FacetsDistribution == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v40, v41 := range in.FacetsDistribution {
				if v40 > 0 {
					out.RawByte(',')
				}
				out.String(string(v41))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"FacetFilters\":"
		out.RawString(prefix)
		if m, ok := in.FacetFilters.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.FacetFilters.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.FacetFilters))
		}
	}
	{
		const prefix string = ",\"PlaceholderSearch\":"
		out.RawString(prefix)
		out.Bool(bool(in.PlaceholderSearch))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo6(l, v)
}
func easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo7(in *jlexer.Lexer, out *PrimaryKey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "primaryKey":
			out.PrimaryKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo7(out *jwriter.Writer, in PrimaryKey) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"primaryKey\":"
		out.RawString(prefix[1:])
		out.String(string(in.PrimaryKey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PrimaryKey) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PrimaryKey) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PrimaryKey) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PrimaryKey) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo7(l, v)
}
func easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo8(in *jlexer.Lexer, out *Name) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo8(out *jwriter.Writer, in Name) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Name) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Name) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Name) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Name) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo8(l, v)
}
func easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo9(in *jlexer.Lexer, out *ListDocumentsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "offset":
			out.Offset = int64(in.Int64())
		case "limit":
			out.Limit = int64(in.Int64())
		case "attributesToRetrieve":
			if in.IsNull() {
				in.Skip()
				out.AttributesToRetrieve = nil
			} else {
				in.Delim('[')
				if out.AttributesToRetrieve == nil {
					if !in.IsDelim(']') {
						out.AttributesToRetrieve = make([]string, 0, 4)
					} else {
						out.AttributesToRetrieve = []string{}
					}
				} else {
					out.AttributesToRetrieve = (out.AttributesToRetrieve)[:0]
				}
				for !in.IsDelim(']') {
					var v42 string
					v42 = string(in.String())
					out.AttributesToRetrieve = append(out.AttributesToRetrieve, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo9(out *jwriter.Writer, in ListDocumentsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Offset != 0 {
		const prefix string = ",\"offset\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Offset))
	}
	if in.Limit != 0 {
		const prefix string = ",\"limit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Limit))
	}
	if len(in.AttributesToRetrieve) != 0 {
		const prefix string = ",\"attributesToRetrieve\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v43, v44 := range in.AttributesToRetrieve {
				if v43 > 0 {
					out.RawByte(',')
				}
				out.String(string(v44))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListDocumentsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListDocumentsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListDocumentsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListDocumentsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo9(l, v)
}
func easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo10(in *jlexer.Lexer, out *Keys) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "public":
			out.Public = string(in.String())
		case "private":
			out.Private = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo10(out *jwriter.Writer, in Keys) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Public != "" {
		const prefix string = ",\"public\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Public))
	}
	if in.Private != "" {
		const prefix string = ",\"private\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Private))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Keys) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Keys) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Keys) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Keys) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo10(l, v)
}
func easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo11(in *jlexer.Lexer, out *Index) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "uid":
			out.UID = string(in.String())
		case "createdAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "primaryKey":
			out.PrimaryKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo11(out *jwriter.Writer, in Index) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"uid\":"
		out.RawString(prefix)
		out.String(string(in.UID))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	if in.PrimaryKey != "" {
		const prefix string = ",\"primaryKey\":"
		out.RawString(prefix)
		out.String(string(in.PrimaryKey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Index) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Index) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Index) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Index) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo11(l, v)
}
func easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo12(in *jlexer.Lexer, out *Health) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "health":
			out.Health = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo12(out *jwriter.Writer, in Health) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"health\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Health))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Health) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Health) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Health) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Health) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo12(l, v)
}
func easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo13(in *jlexer.Lexer, out *CreateIndexResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "uid":
			out.UID = string(in.String())
		case "updateID":
			out.UpdateID = int64(in.Int64())
		case "createdAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "primaryKey":
			out.PrimaryKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo13(out *jwriter.Writer, in CreateIndexResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"uid\":"
		out.RawString(prefix)
		out.String(string(in.UID))
	}
	if in.UpdateID != 0 {
		const prefix string = ",\"updateID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UpdateID))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updatedAt\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	if in.PrimaryKey != "" {
		const prefix string = ",\"primaryKey\":"
		out.RawString(prefix)
		out.String(string(in.PrimaryKey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateIndexResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateIndexResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateIndexResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateIndexResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo13(l, v)
}
func easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo14(in *jlexer.Lexer, out *CreateIndexRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "uid":
			out.UID = string(in.String())
		case "primaryKey":
			out.PrimaryKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo14(out *jwriter.Writer, in CreateIndexRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.UID != "" {
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UID))
	}
	if in.PrimaryKey != "" {
		const prefix string = ",\"primaryKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PrimaryKey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateIndexRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateIndexRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateIndexRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateIndexRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo14(l, v)
}
func easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo15(in *jlexer.Lexer, out *AsyncUpdateID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "updateId":
			out.UpdateID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo15(out *jwriter.Writer, in AsyncUpdateID) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"updateId\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.UpdateID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AsyncUpdateID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AsyncUpdateID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComSenyast4745MeilisearchGo15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AsyncUpdateID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AsyncUpdateID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComSenyast4745MeilisearchGo15(l, v)
}
