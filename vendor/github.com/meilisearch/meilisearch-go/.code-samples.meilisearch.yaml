# This code-samples file is used by the MeiliSearch documentation
# Every example written here will be automatically fetched by
# the documentation on build
# You can read more on https://github.com/meilisearch/documentation/tree/master/.vuepress/code-samples
---
get_one_index_1: |-
  client.Indexes().Get("movies")
list_all_indexes_1: |-
  client.Indexes().List()
create_an_index_1: |-
  client.Indexes().Create(meilisearch.CreateIndexRequest{
    UID: "movies",
  })
update_an_index_1: |-
  response, error := client.Indexes().Get("movies")
  client.Indexes().UpdatePrimaryKey(response.UID, "movie_id")
delete_an_index_1: |-
  client.Indexes().Delete("movies")
get_one_document_1: |-
  var a interface{}
  client.Documents("movies").Get("25684", &a)
get_documents_1: |-
  var a []interface{}
  client.Documents("movies").List(meilisearch.ListDocumentsRequest{
    Limit: 2,
  }, &a)
add_or_replace_documents_1: |-
  documents := []map[string]interface{}{
    {
      "id":           287947,
      "title":        "Shazam",
      "poster":       "https://image.tmdb.org/t/p/w1280/xnopI5Xtky18MPhK40cZAGAOVeV.jpg",
      "overview":     "A boy is given the ability to become an adult superhero in times of need with a single magic word.",
      "release_date": "2019-03-23",
    },
  }
  client.Documents("movies").AddOrReplace(documents)
add_or_update_documents_1: |-
  documents := []map[string]interface{}{
    {
      "id":     287947,
      "title":  "Shazam",
      "genres": "comedy",
    },
  }
  client.Documents("movies").AddOrUpdate(documents)
delete_all_documents_1: |-
  client.Documents("movies").DeleteAllDocuments()
delete_one_document_1: |-
  client.Documents("movies").Delete("25684")
delete_documents_1: |-
  client.Documents("movies").Deletes([]string{
    "23488",
    "153738",
    "437035",
    "363869",
  })
search_1: |-
  client.Search("movies").Search(SearchRequest{
    Query: "American ninja",
  })
get_update_1: |-
  client.Updates("movies").Get(0)
get_all_updates_1: |-
  client.Updates("movies").List()
get_keys_1: |-
  client.Keys().Get()
get_settings_1: |-
  client.Settings("movies").GetAll()
update_settings_1: |-
  distinctAttribute := "movie_id"
  settings := meilisearch.Settings{
    RankingRules: []string{
      "typo",
      "words",
      "proximity",
      "attribute",
      "wordsPosition",
      "exactness",
      "desc(release_date)",
      "desc(rank)",
    },
    DistinctAttribute: &distinctAttribute,
    SearchableAttributes: []string{
      "uid",
      "movie_id",
      "title",
      "description",
      "poster",
      "release_date",
      "rank",
    },
    DisplayedAttributes: []string{
      "title",
      "description",
      "poster",
      "release_date",
      "rank",
    },
    StopWords: []string{
      "the",
      "a",
      "an",
    },
    Synonyms: map[string][]string{
      "wolverine": []string{"xmen", "logan"},
      "logan":     []string{"wolverine"},
    },
  }
  client.Settings("movies").UpdateAll(settings)
reset_settings_1: |-
  client.Settings("movies").ResetAll()
get_synonyms_1: |-
  client.Settings("movies").GetSynonyms()
update_synonyms_1: |-
  synonyms := map[string][]string{
    "wolverine": []string{"xmen", "logan"},
    "logan":     []string{"wolverine", "xmen"},
    "wow":       []string{"world of warcraft"},
  }
  client.Settings("movies").UpdateSynonyms(synonyms)
reset_synonyms_1: |-
  client.Settings("movies").ResetSynonyms()
get_stop_words_1: |-
  client.Settings("movies").GetStopWords()
update_stop_words_1: |-
  stopWords := []string{"of", "the", "to"}
  client.Settings("movies").UpdateStopWords(stopWords)
reset_stop_words_1: |-
  client.Settings(indexUID).ResetStopWords()
get_ranking_rules_1: |-
  client.Settings("movies").GetRankingRules()
update_ranking_rules_1: |-
  rankingRules := []string{
    "typo",
    "words",
    "proximity",
    "attribute",
    "wordsPosition",
    "exactness",
    "asc(release_date)",
    "desc(rank)",
  }
  client.Settings("movies").UpdateRankingRules(rankingRules)
reset_ranking_rules_1: |-
  client.Settings("movies").ResetRankingRules()
get_distinct_attribute_1: |-
  client.Settings("movies").GetDistinctAttribute()
update_distinct_attribute_1: |-
  client.Settings("movies").UpdateDistinctAttribute("movie_id")
reset_distinct_attribute_1: |-
  client.Settings("movies").ResetDistinctAttribute()
get_searchable_attributes_1: |-
  client.Settings("movies").GetSearchableAttributes()
update_searchable_attributes_1: |-
  searchableAttributes := []string{
    "uid",
    "movie_id",
    "title",
    "description",
    "poster",
    "release_date",
    "rank",
  }
  client.Settings("movies").UpdateSearchableAttributes(searchableAttributes)
reset_searchable_attributes_1: |-
  client.Settings("movies").ResetSearchableAttributes()
get_attributes_for_faceting_1: |-
  client.Settings("movies").GetAttributesForFaceting()
update_attributes_for_faceting_1: |-
  attributesForFaceting := []string{
    "genres",
    "director",
  }
  client.Settings("movies").UpdateAttributesForFaceting(attributesForFaceting)
reset_attributes_for_faceting_1: |-
  client.Settings("movies").ResetAttributesForFaceting()
get_displayed_attributes_1: |-
  client.Settings("movies").GetDisplayedAttributes()
update_displayed_attributes_1: |-
  displayedAttributes := []string{
    "title",
    "description",
    "release_date",
    "rank",
    "poster",
  }
  client.Settings("movies").UpdateDisplayedAttributes(displayedAttributes)
reset_displayed_attributes_1: |-
  client.Settings("movies").ResetDisplayedAttributes()
get_index_stats_1: |-
  client.Stats().Get("movies")
get_indexes_stats_1: |-
  client.Stats().GetAll()
get_health_1: |-
  client.Health().Get()
get_version_1: |-
  client.Version().Get()
distinct_attribute_guide_1: |-
  client.Settings("jackets").UpdateDistinctAttribute("product_id")
field_properties_guide_searchable_1: |-
  searchableAttributes := []string{
    "uid",
    "movie_id",
    "title",
    "description",
    "poster",
    "release_date",
    "rank",
  }
  client.Settings("movies").UpdateSearchableAttributes(searchableAttributes)
field_properties_guide_displayed_1: |-
  displayedAttributes := []string{
    "title",
    "description",
    "poster",
    "release_date",
    "rank",
  }
  client.Settings("movies").UpdateDisplayedAttributes(displayedAttributes)
filtering_guide_1: |-
  results, error := client.Search("movies").Search(meilisearch.SearchRequest{
    Query:   "Avengers",
    Filters: "release_date > \"795484800\"",
  })
filtering_guide_2: |-
  results, error := client.Search("movies").Search(meilisearch.SearchRequest{
    Query:   "Batman",
    Filters: "release_date > 795484800 AND (director = \"Tim Burton\" OR director = \"Christopher Nolan\")",
  })
filtering_guide_3: |-
  results, error := client.Search("movies").Search(meilisearch.SearchRequest{
    Query:   "horror",
    Filters: "director = \"Jordan Peele\"",
  })
filtering_guide_4: |-
  results, error := client.Search("books").Search(meilisearch.SearchRequest{
    Query:   "Planet of the Apes",
    Filters: "rating >= 3 AND (NOT director = \"Tim Burton\"",
  })
search_parameter_guide_query_1: |-
  results, error := client.Search("movies").Search(meilisearch.SearchRequest{
    Query: "shifu",
  })
search_parameter_guide_offset_1: |-
  results, error := client.Search("movies").Search(meilisearch.SearchRequest{
    Query:  "shifu",
    Offset: 1,
  })
search_parameter_guide_limit_1: |-
  results, error := client.Search("movies").Search(meilisearch.SearchRequest{
    Query: "shifu",
    Limit: 2,
  })
search_parameter_guide_retrieve_1: |-
  results, error := client.Search("movies").Search(meilisearch.SearchRequest{
    Query:                "shifu",
    AttributesToRetrieve: []string{"overview", "title"},
  })
search_parameter_guide_crop_1: |-
  results, error := client.Search("movies").Search(meilisearch.SearchRequest{
    Query:            "shifu",
    AttributesToCrop: []string{"overview"},
    CropLength:       10,
  })
search_parameter_guide_highlight_1: |-
  results, error := client.Search("movies").Search(meilisearch.SearchRequest{
    Query:                 "shifu",
    AttributesToHighlight: []string{"overview"},
  })
search_parameter_guide_filter_1: |-
  results, error := client.Search("movies").Search(meilisearch.SearchRequest{
    Query:   "n",
    Filters: "title = Nightshift",
  })
search_parameter_guide_filter_2: |-
  results, error := client.Search("movies").Search(meilisearch.SearchRequest{
    Query:   "n",
    Filters: "title=\"Kung Fu Panda\"",
  })
search_parameter_guide_matches_1: |-
  results, error := client.Search("movies").Search(meilisearch.SearchRequest{
    Query:                 "n",
    Filters:               "title=\"Kung Fu Panda\"",
    AttributesToHighlight: []string{"overview"},
    Matches:               true,
  })
settings_guide_synonyms_1: |-
  synonyms := map[string][]string{
    "sweater": []string{"jumper"},
    "jumper":  []string{"sweater"},
  }
  client.Settings("tops").UpdateSynonyms(synonyms)
settings_guide_stop_words_1: |-
  stopWords := []string{"the", "a", "an"}
  client.Settings("movies").UpdateStopWords(stopWords)
settings_guide_ranking_rules_1: |-
  rankingRules := []string{
    "typo",
    "words",
    "proximity",
    "attribute",
    "wordsPosition",
    "exactness",
    "asc(release_date)",
    "desc(rank)",
  }
  client.Settings("movies").UpdateRankingRules(rankingRules)
settings_guide_distinct_1: |-
  client.Settings("jackets").UpdateDistinctAttribute("movie_id")
settings_guide_searchable_1: |-
  searchableAttributes := []string{
    "uid",
    "movie_id",
    "title",
    "description",
    "poster",
    "release_date",
    "rank",
  }
  client.Settings("movies").UpdateSearchableAttributes(searchableAttributes)
settings_guide_displayed_1: |-
  displayedAttributes := []string{
    "title",
    "description",
    "poster",
    "release_date",
    "rank",
  }
  client.Settings("movies").UpdateDisplayedAttributes(displayedAttributes)
documents_guide_add_movie_1: |-
  documents := []map[string]interface{}{
    {
      "movie_id": "123sq178",
      "title":    "Amelie Poulain",
    },
  }
  client.Documents("movies").AddOrUpdate(documents)
search_guide_1: |-
  results, error := client.Search("movies").Search(meilisearch.SearchRequest{
    Query:  "shifu",
    Limit:  5,
    Offset: 10,
  })
search_guide_2: |-
  results, error := client.Search("movies").Search(meilisearch.SearchRequest{
    Query:   "Avengers",
    Filters: "release_date > \"795484800\"",
  })
getting_started_create_index_md: |-
  ```bash
  go get -u github.com/meilisearch/meilisearch-go
  ```

  ```go
  import (
      "github.com/meilisearch/meilisearch-go"
  )
  ```

  ```go
  var client = NewClient(meilisearch/Config{
      Host: "http://127.0.0.1:7700",
  })

  createIndexResp, err := client.Indexes().Create(meilisearch.CreateIndexRequest{
      UID: "movies",
  })

  if err != nil {
      panic(err)
  }
  ```

  [About this package](https://github.com/meilisearch/meilisearch-go/)
getting_started_add_documents_md: |-
  ```go
  import (
      "os"
      "encoding/json"
      "io/ioutil"
      "github.com/meilisearch/meilisearch-go"
  )
  ```

  ```go
  jsonFile, _ := os.Open("movies.json")
  defer jsonFile.Close()

  byteValue, _ := ioutil.ReadAll(jsonFile)
  var movies []map[string]interface{}
  json.Unmarshal(byteValue, &movies)

  updateDocumentsResp, err := client.Documents("movies").AddOrUpdate(movies)

  if err != nil {
      panic(err)
  }
  ```
  [About this package](https://github.com/meilisearch/meilisearch-go/)
getting_started_search_md: |-
  ```go
  results, err := client.Search("movies").Search(meilisearch.SearchRequest{
      Query: "botman",
  })
  if err != nil {
      panic(err)
  }
  ```

  [About this package](https://github.com/meilisearch/meilisearch-go/)
faceted_search_update_settings_1: |-
  response, error := client.Settings("movies").UpdateAttributesForFaceting([]string{
    "director",
    "genres",
  })
faceted_search_facet_filters_1: |-
  results, error := client.Search("movies").Search(meilisearch.SearchRequest{
    Query: "thriller",
    FacetFilters: [][]string{
      []string{"genres:Horror", "genres:Mystery"},
      []string{"director:Jordan Peele"},
    },
  })
faceted_search_facets_distribution_1: |-
  results, error := client.Search("movies").Search(meilisearch.SearchRequest{
    Query: "Batman",
    FacetsDistribution: []string{
      "genres",
    },
  })
faceted_search_walkthrough_attributes_for_faceting_1: |-
  response, error := client.Settings("movies").UpdateAttributesForFaceting([]string{
    "director",
    "producer",
    "genres",
    "production_companies",
  })
faceted_search_walkthrough_facet_filters_1: |-
  results, error := client.Search("movies").Search(meilisearch.SearchRequest{
    Query: "thriller",
    FacetFilters: [][]string{
      []string{"genres:Horror", "genres:Mystery"},
      []string{"director:Jordan Peele"},
    },
  })
faceted_search_walkthrough_facets_distribution_1: |-
  results, error := client.Search("movies").Search(meilisearch.SearchRequest{
    Query: "Batman",
    FacetsDistribution: []string{
      "genres",
    },
  })
